#! /usr/bin/env stap
/**
 * This is the primary Systemtap script for logging connection info. It outputs
 * in a CSV format. Currently it works with Ubuntu 18.04 only as some syscalls
 * have changed since the 16.04 kernel. We track statistics per connection with
 * a number of global arrays, assuming that each thread handles one connection
 * at a time.
 */
global connect, ip, p

// We log any network in/out traffic and match it with the thread. This includes
// but is not limited to Apache traffic.
probe netfilter.ip.local_in {
  ip[tid()] = saddr
  p[tid()] = sport
  connect[tid()] = 1
}
probe netfilter.ip.local_out {
  ip[tid()] = daddr
  p[tid()] = dport
  connect[tid()] = 1
}

probe netfilter.ip.local_out {
  ip[tid()] = saddr
  p[tid()] = sport
  connect[tid()] = 1
}

probe tcp.sendmsg {
  ip[tid()] = daddr
  p[tid()] = dport
  connect[tid()] = 1
}

probe tcp.receive, tcp.recvmsg {
  ip[tid()] = saddr
  p[tid()] = sport
  connect[tid()] = 1
}

// We probe each TCP connection whenever accept() call occurs
probe kernel.function("tcp_accept").return?,
      kernel.function("inet_csk_accept").return?,
      kernel.function("tcp_connect").return?,
      kernel.function("tcp_write").return?,
      kernel.function("tcp_sent").return?,
      kernel.function("tcp_recv").return?,
      kernel.function("tcp_recved").return?,
      kernel.function("tcp_poll").return?,
      //kernel.function("tcp_close").return?,
      kernel.function("tcp_abort").return?, 
      kernel.function("tcp_listen").return? {
  sock = $return
  if (sock != 0)
  { 
    ip[tid()] = inet_get_ip_source(sock)
    p[tid()] = inet_get_local_port(sock)
    connect[tid()] = 1
  } 
    
}


// When the call returns, we output the all the data we currently have on the thread
// and the syscall itself. If there is an active connection at this time, we also show
// the remote IP and port. When the connection closes, we clear all values related to
// the conenction so we can get accurate per-connection statistics.
probe kernel.function("*@net/socket.c").return {
  if(execname() == "apache2") {
    if(connect[tid()] == 1)
      printf("%s,%d,%d,%d,%s,%d\n", ppfunc(), gettimeofday_us(), tid(), pid(), ip[tid()], p[tid()])
    else
      printf("%s,%d,%d,%d,-1,-1\n", ppfunc(), gettimeofday_us(), tid(), pid())
  
    if(ppfunc() == "SyS_shutdown" || ppfunc() == "sock_destroy_inode") {
      delete connect[tid()]
      delete ip[tid()]
      delete p[tid()]
    }
  }
}


// Print out the CSV header when the probe begins
probe begin {
  printf("func,timestamp,tid,pid,addr,port\n")
}
