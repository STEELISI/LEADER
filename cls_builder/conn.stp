#! /usr/bin/env stap
/**
 * This is the primary Systemtap script for logging connection info. It outputs
 * in a CSV format. Currently it works with Ubuntu 18.04 only as some syscalls
 * have changed since the 16.04 kernel. We track statistics per connection with
 * a number of global arrays, assuming that each thread handles one connection
 * at a time.
 */

// We log any network in/out traffic and match it with the thread. This includes
// but is not limited to Apache traffic.
probe netfilter.ip.local_in {
  printf("%s,%d,%d,%d,%s,%d\n", ppfunc(), gettimeofday_us(), tid(), pid(), saddr, sport)
}
probe netfilter.ip.local_out {
  printf("%s,%d,%d,%d,%s,%d\n", ppfunc(), gettimeofday_us(), tid(), pid(), daddr, dport)
}

// We probe each TCP connection whenever accept() call occurs
probe kernel.function("tcp_accept").return?,
      kernel.function("inet_csk_accept").return? {
  sock = $return
  if (sock != 0) {
    printf("%s,%d,%d,%d,%s,%d\n", ppfunc(), gettimeofday_us(), tid(), pid(), inet_get_ip_source(sock), inet_get_local_port(sock))
  }
}

probe tcp.receive {
  printf(" %15s %15s  %5d  %5d  %d  %d  %d  %d  %d  %d\n",
         saddr, daddr, sport, dport, urg, ack, psh, rst, syn, fin)
}

// When the call returns, we output the all the data we currently have on the thread
// and the syscall itself. If there is an active connection at this time, we also show
// the remote IP and port. When the connection closes, we clear all values related to
// the conenction so we can get accurate per-connection statistics.
probe kernel.function("*@net/socket.c").return {
  if(execname() == "apache2") {
      printf("%s,%d,%d,%d,-1,-1\n", ppfunc(), gettimeofday_us(), tid(), pid())
  }
}

// Print out the CSV header when the probe begins
probe begin {
  printf("func,timestamp,tid,pid,addr,port\n")
}
